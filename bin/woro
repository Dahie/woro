#!/usr/bin/env ruby
# coding: utf-8

require 'commander/import'
require 'woro'

program :name, 'woro'
program :version, Woro::VERSION
program :description, 'Write once, run once - Management of one-time remote tasks'


#list = Woro::List.new

#default_command :list

command :init do |c|
  c.syntax      = 'woro init [options]'
  c.description = 'Initialize Woro in the current Rails directory and setup Gist collection'
  c.option '--[no-]force', 'force overwrite of existing config file'
  c.action do |args, options|

    if agree 'Login to Gist/Github for private Woro tasks (Yes/No)?  '
      Gist.login!
    #else
    #  access_token = ask "Secure gists via Access Token:"
    end

    # create Gist with welcome file
    # additional tasks will be added to this first gist
    #app_name = fetch(:app_name, 'TestApp') #Rails.application.class.parent_name
    app_name = ask 'Application name: '
    result = Woro::Gister.create_initial_gist(app_name)
    gist_id = result['id']

    FileUtils.mkdir_p File.dirname(Woro::Configuration.config_file) if !File.exists? File.dirname(Woro::Configuration.config_file)
    config = Woro::Configuration.save(app_name: app_name,
                                      adapter: { gist: {gist_id: gist_id } })
    say 'Initialized at `./config/woro.yml`'

    say 'Create lib/woro_tasks/'
    FileUtils.mkdir_p config.woro_task_dir if !File.exists? config.woro_task_dir

    say 'Create woro.rake in lib/tasks/'
    FileUtils.mkdir_p config.rake_task_dir if !File.exists? config.rake_task_dir
    FileUtils.cp(File.dirname(__FILE__) + '/../lib/woro/templates/woro.rake', config.rake_task_dir)
  end
end

command :new do |c|
  c.syntax      = 'woro create <task> [options]'
  c.summary     = 'Create new tasks'
  c.description = 'Creates one or more new templated Rake tasks'
  c.example 'Create task called "cleanup"', 'woro new cleanup'
  c.example 'Creates tasks called "cleanup", "fix1" and "fix2"', 'woro new cleanup fix1 fix2'
  c.action do |args, options|
    args.each do |arg|
      #abort 'task already created' if task.exists?
      config = Woro::Configuration.load
      sanitized_task_name = Woro::Task.sanitize_task_name(arg)
      task = Woro::Task.create(config.adapter[:gist][:gist_id], sanitized_task_name)
      say "Created lib/woro_tasks/#{sanitized_task_name}.rake"
    end
  end
end

command :push do |c|
  c.syntax      = 'woro push <task> [options]'
  c.summary     = 'Push tasks to remote collection, updates existing tasks'
  c.description = 'Pushes one or more local tasks to the remote collection. Existing tasks by this name in the remote connection will be updated.'
  c.example 'Pushes the task "cleanup" to the remote collection', 'woro push cleanup'
  c.action do |args, options|
    args.each do |arg|
      # TODO presence check
      config = Woro::Configuration.load
      sanitized_task_name = Woro::Task.sanitize_task_name(arg)
      # Pushes a new woro task by given name to gist, this can be done multiple time.
      task = Woro::Task.new(config.adapter[:gist][:gist_id], sanitized_task_name)
      result = task.push
      say "Uploaded lib/woro_tasks/#{sanitized_task_name}.rake to #{result[:url]}"
    end
  end
end

command :pull do |c|
  c.syntax      = 'woro pull <task> [options]'
  c.summary     = 'Pull Woro task from remote repository'
  c.description = 'Pushes one or more local tasks to the remote collection. Existing tasks by this name in the remote connection will be updated.'
  c.example 'Pushes the task "cleanup" to the remote collection', 'woro push cleanup'
  c.option '--[no-]force', 'force overwrite of existing task file'
  c.action do |args, options|
    abort "invalid command. See 'woro help' for more information" unless args.empty?
    # TODO check_presence_of_task_name
    # TODO ask before overwrite
    config = Woro::Configuration.load
    sanitized_task_name = Woro::Task.sanitize_task_name(args.first)

    # Pulls the  woro task by given name to gist, this can be done multiple time.
    task = Woro::Task.new(config.adapter[:gist][:gist_id], sanitized_task_name)

    system "cd '#{config.woro_task_dir}' && curl -O -# #{task.raw_url}"
    say "Downloaded #{sanitized_task_name} to #{config.woro_task_dir}/#{sanitized_task_name}.rake"
  end
end

command :list do |c|
  c.syntax      = 'woro [list|ls] [options]'
  c.description = 'List tasks'
  c.example 'List remote tasks', 'woro list'
  c.example 'List all tasks', 'woro list --all'
  c.option '-a', '--all', 'List all tasks'
  c.action do |args, options|
    abort "invalid command. See 'woro help' for more information" unless args.empty?

    config = Woro::Configuration.load
    files = Woro::Gister.get_list_of_files config.adapter[:gist][:gist_id]
    tasks = files.map { |file_name, data| OpenStruct.new(name_with_args: file_name.split('.rake').first, comment: Woro::Gister.extract_description(data)) if file_name.include? '.rake' }
    tasks.compact!
    width ||= tasks.map { |t| t.name_with_args.length }.max || 10
    tasks.each do |t|
      puts "  %-#{width}s   # %s" % [ t.name_with_args, t.comment ]
    end
  end
end
alias_command :ls, :list

