#!/usr/bin/env ruby
# coding: utf-8

require 'commander/import'
require 'woro'

program :name, 'woro'
program :version, Woro::VERSION
program :description, 'Write once, run once - Management of one-time remote tasks
Plugins with Mina to add support for rake tasks hosted in remote collection, such as Gist.

Say you have a data migration to perform on a remote server. The procedure is too complex
to just do it in the remote console and using database migrations would be evil.
A rake task would be nice, but checking this in with the source code repository
adds clutter, as you know you will only run this once.
Woro offers a quick way of pushing rake tasks onto the remote server, execute them
and delete them instantly. Using Github\'s gist, you keep version control of the tasks
and can share them with colleagues.

Woro helps you create rake tasks, that you can develop and run locally.
Once you are ready, woro let\'s you push them online to a remote collection like Gist.
Using a mina deployment setup, these tasks are downloaded on the remote system,
executed by rake and cleaned up afterwards.'

default_command :list

def create_directory_unless_existing(directory)
  unless File.exists? directory
    FileUtils.mkdir_p directory
    say "Created #{directory}"
  end
end

def create_required_files
  create_directory_unless_existing Woro::Configuration.woro_task_dir
  create_directory_unless_existing Woro::Configuration.rake_task_dir

  unless File.exists? File.join(Woro::Configuration.rake_task_dir, 'woro.rake')
    FileUtils.cp(File.dirname(__FILE__) + '/../lib/woro/templates/woro.rake',
                 Woro::Configuration.rake_task_dir)
    say "Created woro.rake in #{Woro::Configuration.rake_task_dir}"
  end
end

def woro_environment_setup?
  File.exists?(Woro::Configuration.woro_task_dir) &&
    File.exists?(File.join('config', 'woro.yml')) &&
    File.exists?(Woro::Configuration.rake_task_dir) &&
    File.exists?(File.join(Woro::Configuration.rake_task_dir, 'woro.rake'))
end

command :init do |c|
  c.syntax      = 'woro init [options]'
  c.description = 'Initialize Woro in the current Rails directory and setup Gist collection'
  c.option '--[no-]force', 'force overwrite of existing config file'
  c.action do |args, options|


    # TODO do choice http://stackoverflow.com/questions/24966581/highline-ruby-gem-how-to-provide-a-variable-number-of-menu-choices-at-runtime

    if agree 'Login to Gist/Github for private Woro tasks (Yes/No)?  '
      Gist.login!
    #elsif agree 'Login to AWS/S3 for private Woro tasks (Yes/No)?  '

    end
    # if none of these, use gist, but public

    # create Gist with welcome file
    # additional tasks will be added to this first gist
    begin
      require File.join(Dir.pwd, 'config', 'application.rb')
      app_name = Rails.application.class.parent_name
    rescue LoadError
      app_name = ask('Application name: ')
    end
    result = Woro::Adapters::Gist.create_initial_remote_task(app_name)

    # configure adapters
    gist_adapter = {
      gist_id: result['id'],
      public: false
    }

    unless File.exists? File.dirname(Woro::Configuration.config_file)
      FileUtils.mkdir_p File.dirname(Woro::Configuration.config_file)
    end

    options.default(adapters: { gist: gist_adapter } )
    config = Woro::Configuration.save(options.__hash__)
    create_required_files
  end
end

command :new do |c|
  c.syntax      = 'woro new <task> [options]'
  c.summary     = 'Create new tasks'
  c.description = 'Creates one or more new templated Rake tasks'
  c.example 'Create task called "cleanup"', 'woro new cleanup'
  c.example 'Creates tasks called "cleanup", "fix1" and "fix2"', 'woro new cleanup fix1 fix2'
  c.option '--[no-]force', 'force overwrite of existing task file'
  c.action do |args, options|
    abort 'Woro environment is not set up. Call `woro init` to do so.' unless woro_environment_setup?

    config = Woro::Configuration.load
    force_overwrite = options.force
    args.each do |task_name|
      task = Woro::Task.new(task_name)
      if !task.exists? || force_overwrite || agree("Overwrite existing #{task.file_path}?")
        task.create_from_task_template
        say "Created #{task.file_path}"
      end
    end
  end
end

command :push do |c|
  c.syntax      = 'woro push <task> [options]'
  c.summary     = 'Push tasks to remote collection, updates existing tasks'
  c.description = 'Pushes one or more local tasks to the remote collection. Existing tasks by this name in the remote connection will be updated.'
  c.example 'Pushes the task "cleanup" to the remote collection', 'woro push cleanup'
  c.action do |args, options|
    abort 'Woro environment is not set up. Call `woro init` to do so.' unless woro_environment_setup?

    config = Woro::Configuration.load
    args.each do |arg|
      unless arg.include?(':')
        say_error "Does not specify upload target"
        next
      end
      adapter_name, task_name = arg.split(':')
      adapter = config.adapter adapter_name
      # Pushes a new woro task by given name to gist, this can be done multiple time.
      task = Woro::Task.new(task_name)
      if task.exists?
        result = adapter.push(task)
        say "Uploaded #{task.file_path} to #{result['url']}"
      else
        say "Task #{task.task_name} not found at #{task.file_path}"
      end
    end
  end
end

command :pull do |c|
  c.syntax      = 'woro pull <task> [options]'
  c.summary     = 'Pull Woro task from remote repository'
  c.description = 'Pulls one task from the remote collection. Existing local tasks can be overwritten.'
  c.example 'Pulls the task "cleanup" from the remote collection', 'woro pull gist:cleanup'
  c.option '--[no-]force', 'force overwrite of existing task file'
  c.action do |args, options|
    abort 'Woro environment is not set up. Call `woro init` to do so.' unless woro_environment_setup?

    config = Woro::Configuration.load
    args.each do |arg|
      unless arg.include?(':')
        say_error "Does not specify download target"
        next
      end
      adapter_name, task_name = arg.split(':')
      adapter = config.adapter adapter_name
      task = Woro::Task.new(task_name)
      force_overwrite = options.force
      if !task.exists? || force_overwrite || agree("Overwrite existing #{task.file_path}?")
        system "cd '#{config.woro_task_dir}' && curl -O -# #{adapter.raw_url(task.file_name)}"
        say "Downloaded #{task.task_name} to #{task.file_path}"
      end
    end
  end
end

command :list do |c|
  c.syntax      = 'woro [list|ls] [options]'
  c.description = 'List tasks'
  c.example 'List remote tasks', 'woro list'
  c.example 'List all tasks', 'woro list --all'
  c.option '-a', '--all', 'List all tasks'
  c.action do |args, options|
    abort 'Woro environment is not set up. Call `woro init` to do so.' unless woro_environment_setup?
    abort "invalid command. See 'woro help' for more information" unless args.empty?
    config = Woro::Configuration.load
    config.adapters.each do |adapter_config|
      puts "#{adapter_config[0]} ---"
      adapter = config.adapter(adapter_config[0])
      files = adapter.list_contents || {}
      tasks = files.map do |file_name, data|
        if file_name.include? '.rake'
          OpenStruct.new(name_with_args: file_name.split('.rake').first,
                         comment: adapter.extract_description(data))
        end
      end
      tasks.compact!
      Woro::TaskHelper.print_task_list(tasks)
    end
    puts "local ---"
    tasks = Woro::TaskHelper.woro_task_files(config.woro_task_dir) do |file_name, data|
      OpenStruct.new(name_with_args: file_name.split('.rake').first,
                     comment: Woro::TaskHelper.extract_description(data))
    end
    Woro::TaskHelper.print_task_list(tasks)
  end
end
alias_command :ls, :list

