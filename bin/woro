#!/usr/bin/env ruby
# coding: utf-8

require 'commander/import'
require 'woro'

program :name, 'woro'
program :version, Woro::VERSION
program :description, 'Write once, run once - Management of one-time remote tasks
Plugins with Mina to add support for rake tasks hosted in remote collection, such as Gist.

Say you have a data migration to perform on a remote server. The procedure is too complex
to just do it in the remote console and using database migrations would be evil.
A rake task would be nice, but checking this in with the source code repository
adds clutter, as you know you will only run this once.
Woro offers a quick way of pushing rake tasks onto the remote server, execute them
and delete them instantly.

Woro helps you create rake tasks, that you can develop and run locally.
Once you are ready, woro let\'s you push them online to a remote collection like Gist.
Using a mina deployment setup, these tasks are downloaded on the remote system,
executed by rake and cleaned up afterwards.'

default_command :list

command :init do |c|
  c.syntax      = 'woro init [options]'
  c.description = 'Initialize Woro in the current Rails directory and setup Gist collection'
  c.option '--[no-]force', 'force overwrite of existing config file'
  c.action do |args, options|
    available_adapters = Woro::Adapters.constants.reject { |name| name == :Base }
    adapters = {}
    begin
      adapters.merge! Woro::TaskHelper.choose_and_build_adapter_config(available_adapters)
    end while agree('Do you want to configure another service?')
    options.default('adapters' => adapters )

    Woro::TaskHelper.create_required_files
    Woro::Configuration.save(options.__hash__)
  end
end

command :new do |c|
  c.syntax      = 'woro new <task> [options]'
  c.summary     = 'Create new tasks'
  c.description = 'Creates one or more new templated Rake tasks'
  c.example 'Create task called "cleanup"', 'woro new cleanup'
  c.example 'Creates tasks called "cleanup", "fix1" and "fix2"', 'woro new cleanup fix1 fix2'
  c.option '--[no-]force', 'force overwrite of existing task file'
  c.action do |args, options|
    Woro::TaskHelper.check_environment

    Woro::Configuration.load
    force_overwrite = options.force
    args.each do |task_name|
      task = Woro::Task.new(task_name)
      if !task.exists? || force_overwrite || agree("Overwrite existing #{task.file_path}?")
        task.create_from_task_template
        say "Created `#{task.file_path}`"
      end
    end
  end
end
alias_command :create, :new

command :push do |c|
  c.syntax      = 'woro push <task> [options]'
  c.summary     = 'Push tasks to remote collection, updates existing tasks'
  c.description = 'Pushes one or more local tasks to the remote collection. Existing tasks by this name in the remote connection will be updated.'
  c.example 'Pushes the task "cleanup" to the remote collection', 'woro push ftp:cleanup'
  c.action do |args, options|
    Woro::TaskHelper.check_environment

    config = Woro::Configuration.load
    args.each do |arg|
      unless arg.include?(':')
        say_error "Does not specify upload service, eg `woro push ftp:#{arg}`"
        next
      end
      adapter_name, task_name = arg.split(':')
      # Pushes a new woro task by given name to storage, this can be done multiple time.
      task = Woro::Task.new(task_name)
      if task.exists?
        adapter = config.adapter adapter_name
        result = adapter.push(task)
        say "Uploaded `#{task.file_path}` to #{result['url']}"
      else
        say_error "Task `#{task.task_name}` not found at `#{task.file_path}`"
      end
    end
  end
end

command :pull do |c|
  c.syntax      = 'woro pull <task> [options]'
  c.summary     = 'Pull Woro task from remote repository'
  c.description = 'Pulls one task from the remote collection. Existing local tasks can be overwritten.'
  c.example 'Pulls the task "cleanup" from the remote collection', 'woro pull ftp:cleanup'
  c.option '--[no-]force', 'force overwrite of existing task file'
  c.action do |args, options|
    Woro::TaskHelper.check_environment

    config = Woro::Configuration.load
    args.each do |arg|
      unless arg.include?(':')
        say_error "Does not specify download service, eg `woro pull ftp:#{arg}`"
        next
      end
      adapter_name, task_name = arg.split(':')
      adapter = config.adapter adapter_name
      task = Woro::Task.new(task_name)
      force_overwrite = options.force
      if !task.exists? || force_overwrite || agree("Overwrite existing #{task.file_path}?")
        system "cd '#{config.woro_task_dir}' && curl -sSO #{adapter.raw_url(task.file_name)}" # > #{task.file_path}"
        say "Downloaded `#{task.task_name}` to `#{task.file_path}`"
      end
    end
  end
end

command :list do |c|
  c.syntax      = 'woro [list|ls] [options]'
  c.description = 'List tasks'
  c.example 'List remote tasks', 'woro list'
  #c.example 'List all tasks', 'woro list --all'
  #c.option '-a', '--all', 'List all tasks'
  c.action do |args, options|
    Woro::TaskHelper.check_environment
    Woro::TaskList.new(Woro::Configuration.load).fill.print
  end
end
alias_command :ls, :list
